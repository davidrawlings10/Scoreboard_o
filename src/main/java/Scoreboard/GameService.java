package Scoreboard;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.Random;
import java.util.concurrent.TimeUnit;

@Service
public class GameService {

    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;

    public String playGame(int home_team_id, int away_team_id, Sport sport, Integer season_id) throws InterruptedException {
        Game game = new Game();
        game.setHomeTeamId(home_team_id);
        game.setAwayTeamId(away_team_id);
        game.setHomeScore(3);
        game.setAwayScore(2);
        System.out.println("SERVICE:"+userRepository);
        userRepository.save(game);

        return "SAVED";

        //switch (sport) {
        //    case HOCKEY:
                //return playHockeyV2(home_team_id, away_team_id, season_id);
        //    default:
        //        return "";
        //}
    }

    private void playHockeyV1(long home_team_id, long away_team_id, long season_id) {
        Random rand = new Random();

        final int maxScore = 6;

        int home_score = rand.nextInt(maxScore);
        int away_score = rand.nextInt(maxScore);

        //insertGame(home_team_id, away_team_id, home_score, away_score, season_id);
    }

    private String playHockeyV2(int home_team_id, int away_team_id, Integer season_id) throws InterruptedException {
        int home_score = 0, away_score = 0, period = 1, minutes = 20, seconds = 0;

        while (true) {

            //TimeUnit.SECONDS.sleep(1);

            if (period == 5) {
                if (shootout()) {
                    home_score++;
                } else {
                    away_score++;
                }
                break;
            }

            // average goals per period .869
            // .869 / 20 = .04345 average goals per minutes
            // .04345 / 60 = .00072416 average goals per second

            if (RandomService.decide(0.00072416)) {
                home_score++;
                if (period == 4)
                    break;
            }
            if (RandomService.decide(0.00072416)) {
                away_score++;
                if (period == 4)
                    break;
            }

            seconds--;

            if (seconds == -1) {
                minutes--;
                seconds = 59;
            } else if (seconds == 0 && minutes == 0) {
                System.out.println("HOME: " + home_score + " AWAY: " + away_score + " PERIOD: " + period + " " + minutes + ":" + seconds);
                TimeUnit.SECONDS.sleep(1);

                if (period == 3 && home_score != away_score) {
                    break;
                }

                period++;
                minutes = period == 4 ? 5 : 20;
                seconds = 0;
            }
        }

        Game game = new Game();
        game.setHomeTeamId(home_team_id);
        game.setAwayTeamId(away_team_id);
        game.setHomeScore(home_score);
        game.setAwayScore(away_score);
        userRepository.save(game);

        return "HOME: " + home_score + " AWAY: " + away_score + " PERIOD: " + period + " " + minutes + ":" + seconds;

    }

    private boolean shootout() {
        int homeShootoutScore = 0, awayShootoutScore = 0, shootoutRound = 1;
        System.out.println("Shootout round " + shootoutRound);
        while (shootoutRound < 4 || homeShootoutScore != awayShootoutScore) {
            if (RandomService.decide(31.94)) {
                homeShootoutScore++;
                System.out.println("Home scores");
            } else {
                System.out.println("Home misses");
            }
            if (RandomService.decide(31.94)) {
                awayShootoutScore++;
                System.out.println("Away scores");
            } else {
                System.out.println("Away misses");
            }
            System.out.println("HOME: " + homeShootoutScore + " AWAY: " + awayShootoutScore + " SHOOTOUT ROUND: " + shootoutRound);
            if (shootoutRound >= 3 && homeShootoutScore != awayShootoutScore) {
                break;
            }
            shootoutRound++;
        }

        return homeShootoutScore > awayShootoutScore;
    }
}
